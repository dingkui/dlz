<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dlz.framework.ssme.db.dao.LoginDeviceMapper" >
  <resultMap id="BaseResultMap" type="com.dlz.framework.ssme.db.model.LoginDevice" >
    <id column="ID" property="id" jdbcType="DECIMAL" />
    <result column="USER_ID" property="userId" jdbcType="DECIMAL" />
    <result column="PID" property="pid" jdbcType="VARCHAR" />
    <result column="REG_TIME" property="regTime" jdbcType="TIMESTAMP" />
    <result column="ORDERNO" property="orderno" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, USER_ID, PID, REG_TIME, ORDERNO
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.dlz.framework.ssme.db.model.LoginDeviceCriteria" >
    <include refid="OracleDialectPrefix" />
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_P_LOGIN_DEVICE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="OracleDialectSuffix" />
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from T_P_LOGIN_DEVICE
    where ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" >
    delete from T_P_LOGIN_DEVICE
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.dlz.framework.ssme.db.model.LoginDeviceCriteria" >
    delete from T_P_LOGIN_DEVICE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dlz.framework.ssme.db.model.LoginDevice" >
    insert into T_P_LOGIN_DEVICE (ID, USER_ID, PID, 
      REG_TIME, ORDERNO)
    values (#{id,jdbcType=DECIMAL}, #{userId,jdbcType=DECIMAL}, #{pid,jdbcType=VARCHAR}, 
      #{regTime,jdbcType=TIMESTAMP}, #{orderno,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.dlz.framework.ssme.db.model.LoginDevice" >
    insert into T_P_LOGIN_DEVICE
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="pid != null" >
        PID,
      </if>
      <if test="regTime != null" >
        REG_TIME,
      </if>
      <if test="orderno != null" >
        ORDERNO,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=DECIMAL},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=VARCHAR},
      </if>
      <if test="regTime != null" >
        #{regTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderno != null" >
        #{orderno,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select resultType="java.lang.Integer" id="countByExample" parameterType="com.dlz.framework.ssme.db.model.LoginDeviceCriteria" >
    select count(*) from T_P_LOGIN_DEVICE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update T_P_LOGIN_DEVICE
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null" >
        USER_ID = #{record.userId,jdbcType=DECIMAL},
      </if>
      <if test="record.pid != null" >
        PID = #{record.pid,jdbcType=VARCHAR},
      </if>
      <if test="record.regTime != null" >
        REG_TIME = #{record.regTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.orderno != null" >
        ORDERNO = #{record.orderno,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update T_P_LOGIN_DEVICE
    set ID = #{record.id,jdbcType=DECIMAL},
      USER_ID = #{record.userId,jdbcType=DECIMAL},
      PID = #{record.pid,jdbcType=VARCHAR},
      REG_TIME = #{record.regTime,jdbcType=TIMESTAMP},
      ORDERNO = #{record.orderno,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dlz.framework.ssme.db.model.LoginDevice" >
    update T_P_LOGIN_DEVICE
    <set >
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=DECIMAL},
      </if>
      <if test="pid != null" >
        PID = #{pid,jdbcType=VARCHAR},
      </if>
      <if test="regTime != null" >
        REG_TIME = #{regTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderno != null" >
        ORDERNO = #{orderno,jdbcType=DECIMAL},
      </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dlz.framework.ssme.db.model.LoginDevice" >
    update T_P_LOGIN_DEVICE
    set USER_ID = #{userId,jdbcType=DECIMAL},
      PID = #{pid,jdbcType=VARCHAR},
      REG_TIME = #{regTime,jdbcType=TIMESTAMP},
      ORDERNO = #{orderno,jdbcType=DECIMAL}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <sql id="OracleDialectPrefix" >
    <if test="page != null" >
      <if test="dbType==null">select * from ( select row_.*, rownum rownum_ from (</if>
    </if>
  </sql>
  <sql id="OracleDialectSuffix" >
    <if test="page != null" >
      <if test="dbType==null"><![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]></if>
      <if test='dbType=="MYSQL"'>LIMIT #{page.begin},#{page.pageSize}</if>
    </if>
  </sql>
</mapper>